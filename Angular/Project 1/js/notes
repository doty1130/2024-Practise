/*   document.getElementById("AddWallet").addEventListener("click", function() {
        event.preventDefault();
        document.getElementById("walletObject").innerHTML="";
        WalletAddress.push( document.getElementById("walletAddress").value);
        WalletName.push(document.getElementById("walletName").value);
        for(var i = 0; i < WalletName.length; i++)
           { 
                (function(index) {
                    var xhr3 = new XMLHttpRequest();
                    var url = "https://api.blockcypher.com/v1/btc/main/addrs/" + WalletAddress[index] + "/balance";
        
                    xhr3.open("GET", url, true);
                    xhr3.onreadystatechange = function() {
                        if (xhr3.readyState === 4) {
                            if (xhr3.status === 200) {
                                var response = JSON.parse(xhr3.responseText);
                                displayWalletBalance(response, WalletName[index]);
                            } else {
                                console.log("HERE LOOKK HEREE for balance failed: " + xhr3.responseText + " : " + response + " Error: Unable to fetch data.");
                            }
                        }
                    };
                    xhr3.send();
        
        
                    var xhr4 = new XMLHttpRequest();
                    var url = "https://api.blockcypher.com/v1/btc/main/addrs/" + WalletAddress[index] + "/full";
        
                    xhr4.open("GET", url, true);
                    xhr4.onreadystatechange = function() {
                        if (xhr4.readyState === 4) {
                            if (xhr4.status === 200) {
                                var response = JSON.parse(xhr4.responseText);
                                console.log("HERE LOOKK HEREE for Full: " + xhr4.responseText + " : " + response);
                            } else {
                                console.log("HERE LOOKK HEREE for Full Failed: " + xhr4.responseText + " : " + response + " Error: Unable to fetch data.");
                            }
                        }
                    };
                    xhr4.send();
                })(i);
            }
    });
 */

    /* event.preventDefault(); // Prevent default form submission
    
    alert("Adding Wallet");
    if (!walletName) {
        alert("Finding information");
        WalletAddress.push(document.getElementById("walletAddress").value);
        WalletName.push(document.getElementById("walletName").value);
    } else {
        WalletAddress.push(walletAddress);
        WalletName.push(walletName);
        alert("pushed wallet information");
    }
    
    alert("posing Wallet Information");
    var postresult = document.getElementById("serverCheck");
    postresult.innerHTML = ""; // Clear previous content
    for (var i = 0; i < WalletName.length; i++) {
        postresult.innerHTML += "Wallet Name: " + WalletName[i] + "<br>Wallet Address: " + WalletAddress[i] + "<br>";
    }
    alert("trying to add wallet info to page");
    
    // Clear input fields
    document.getElementById("walletAddress").value = "";
    document.getElementById("walletName").value = ""; */

    // Assuming you have the provided JSON object stored in a variable called 'transactionObject'
/* function createWalletBalanceDataPoint(transactionObject) {
    let inputsTotal = 0;
    let outputsTotal = 0;

    // Calculate total input value
    transactionObject.inputs.forEach(function(input) {
        inputsTotal += input.output_value;
    });

    // Calculate total output value
    transactionObject.outputs.forEach(function(output) {
        outputsTotal += output.value;
    });

    // Calculate the wallet balance by subtracting the total output value from the total input value
    const walletBalance = inputsTotal - outputsTotal - transactionObject.fees;

    // Create a data point object
    const dataPoint = {
        date: transactionObject.received,
        balance: walletBalance
        // You can add more properties here if needed
    };

    return dataPoint;
}

// Usage example:
const transactionObject = {
    // Your transaction object data here...
};

const walletBalanceDataPoint = createWalletBalanceDataPoint(transactionObject);
console.log(walletBalanceDataPoint); // Output the wallet balance data point
 */